# -*- coding: utf-8 -*-
"""FR_BERT_ITA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T5o8sfkwc9dyfhcVAWEseSE_WIFbX8Ch
"""

#Code was written with help from AI
!pip install pandas openpyxl #I prefer excel, I find it more practical
import pandas as pd
import numpy as np
!pip install datasets # install datasets module using pip
!pip install datasets transformers # install datasets and transformers module using pip
!pip install scikit-learn


from datasets import Dataset, DatasetDict # Import DatasetDict
from transformers import (
   BertForSequenceClassification,
   BertTokenizer,
   Trainer,
   TrainingArguments
)
from sklearn.model_selection import train_test_split # Import train_test_split
from sklearn.metrics import accuracy_score

# Load data
df = pd.read_excel('GZ_FoodDataITA.xlsx')

print(df['Difficulty'].value_counts())

#model

# Label mapping
label_map = {
    'Molto facile': 0,
    'Facile': 1,
    'Media': 2,
    'Difficile': 3
}


# Split the dataset into train and test sets
train_df, test_df = train_test_split(df, test_size=0.2, random_state=42)
train_dataset = Dataset.from_pandas(train_df)
test_dataset = Dataset.from_pandas(test_df)

# Load Italian BERT model and tokenizer
model = BertForSequenceClassification.from_pretrained(
    'dbmdz/bert-base-italian-cased',
    num_labels=4
)
tokenizer = BertTokenizer.from_pretrained('dbmdz/bert-base-italian-cased')

# Preprocessing function
def preprocess_function(examples):
    input_texts = []
    for i in range(len(examples['Difficulty'])):
        input_text = ' '.join([
            str(examples[col][i]) for col in examples.keys()
            if col != 'Difficulty'
        ])
        input_texts.append(input_text)

    tokenized = tokenizer(
        input_texts,
        truncation=True,
        padding=True
    )

    tokenized['labels'] = [label_map[examples['Difficulty'][i]] for i in range(len(examples['Difficulty']))]
    return tokenized

# Apply preprocessing
train_dataset = train_dataset.map(preprocess_function, batched=True)
test_dataset = test_dataset.map(preprocess_function, batched=True)

# Combine datasets
dataset = DatasetDict({
    'train': train_dataset,
    'test': test_dataset
})

# Define compute_metrics function
def compute_metrics(pred):
    labels = pred.label_ids
    preds = pred.predictions.argmax(-1)
    acc = accuracy_score(labels, preds)
    return {
        'accuracy': acc,
    }

# Training arguments
training_args = TrainingArguments(
    output_dir="/content/results",
    num_train_epochs=3,
    per_device_train_batch_size=8,
    eval_strategy="epoch",
)

# Create trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=dataset["train"],
    eval_dataset=dataset["test"],
    compute_metrics=compute_metrics
)

# Train model
trainer.train()

results = trainer.evaluate()

# Print metrics
print(f"Accuracy: {results['eval_accuracy']}")
print(f"Loss: {results['eval_loss']}")

# Confusion matrix and classification report
from sklearn.metrics import classification_report, confusion_matrix

# Predictions
predictions = trainer.predict(dataset["test"])
preds = predictions.predictions.argmax(-1)
true_labels = dataset["test"]["labels"]

print("\nClassification Report:")
print(classification_report(true_labels, preds))

print("\nConfusion Matrix:")
print(confusion_matrix(true_labels, preds))

"""
Results copied here for safety (2 epochs)
Accuracy: 0.5714285714285714
Loss: 1.1467478275299072

Classification Report:
              precision    recall  f1-score   support

           0       0.00      0.00      0.00         5
           1       0.57      1.00      0.73        12
           2       0.00      0.00      0.00         3
           3       0.00      0.00      0.00         1

    accuracy                           0.57        21
   macro avg       0.14      0.25      0.18        21
weighted avg       0.33      0.57      0.42        21


Confusion Matrix:
[[ 0  5  0  0]
 [ 0 12  0  0]
 [ 0  3  0  0]
 [ 0  1  0  0]]
 """